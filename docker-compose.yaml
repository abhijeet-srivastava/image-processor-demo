version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - kafka-network

  image-producer:
    build:
      context: ./image-producer
    depends_on:
      - kafka
    environment:
      - SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.springframework.kafka.support.serializer.JsonSerializer
    ports:
      - "8080:8080"
    volumes:
      - ~/Documents/image_processor_demo/input:/input
      - ~/Documents/image_processor_demo/raw:/raw
    networks:
      - kafka-network

#  image-processor-consumer:
#    build:
#      context: ./image-processor-consumer
#    depends_on:
#      - kafka
#    environment:
#      - SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS=kafka:9092
#      - SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER=org.springframework.kafka.support.serializer.JsonDeserializer
#      - SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_TRUSTED_PACKAGES=com.ge.model
#      - SPRING_KAFKA_CONSUMER_GROUP_ID=message-processor-group
#    ports:
#      - "8081:8081"
#    networks:
#      - kafka-network

networks:
  kafka-network:
    driver: bridge